// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prnotifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationsClient is the client API for Notifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsClient interface {
	CreateLikeNotification(ctx context.Context, in *NRequest, opts ...grpc.CallOption) (*NRespond, error)
	CreateCommentNotification(ctx context.Context, in *NRequest, opts ...grpc.CallOption) (*NRespond, error)
	CreateFollowNotification(ctx context.Context, in *RequestUsername, opts ...grpc.CallOption) (*NRespond, error)
	CreateFollowRequestNotification(ctx context.Context, in *RequestUsername, opts ...grpc.CallOption) (*NRespond, error)
	GetNotifications(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (Notifications_GetNotificationsClient, error)
	NotificationSeen(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (*NRespond, error)
	GetUnseenNotificationsCount(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (*NotificationCount, error)
}

type notificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsClient(cc grpc.ClientConnInterface) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) CreateLikeNotification(ctx context.Context, in *NRequest, opts ...grpc.CallOption) (*NRespond, error) {
	out := new(NRespond)
	err := c.cc.Invoke(ctx, "/Notifications/CreateLikeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) CreateCommentNotification(ctx context.Context, in *NRequest, opts ...grpc.CallOption) (*NRespond, error) {
	out := new(NRespond)
	err := c.cc.Invoke(ctx, "/Notifications/CreateCommentNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) CreateFollowNotification(ctx context.Context, in *RequestUsername, opts ...grpc.CallOption) (*NRespond, error) {
	out := new(NRespond)
	err := c.cc.Invoke(ctx, "/Notifications/CreateFollowNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) CreateFollowRequestNotification(ctx context.Context, in *RequestUsername, opts ...grpc.CallOption) (*NRespond, error) {
	out := new(NRespond)
	err := c.cc.Invoke(ctx, "/Notifications/CreateFollowRequestNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) GetNotifications(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (Notifications_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notifications_ServiceDesc.Streams[0], "/Notifications/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationsGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifications_GetNotificationsClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type notificationsGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationsGetNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationsClient) NotificationSeen(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (*NRespond, error) {
	out := new(NRespond)
	err := c.cc.Invoke(ctx, "/Notifications/NotificationSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) GetUnseenNotificationsCount(ctx context.Context, in *NProfile, opts ...grpc.CallOption) (*NotificationCount, error) {
	out := new(NotificationCount)
	err := c.cc.Invoke(ctx, "/Notifications/GetUnseenNotificationsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServer is the server API for Notifications service.
// All implementations must embed UnimplementedNotificationsServer
// for forward compatibility
type NotificationsServer interface {
	CreateLikeNotification(context.Context, *NRequest) (*NRespond, error)
	CreateCommentNotification(context.Context, *NRequest) (*NRespond, error)
	CreateFollowNotification(context.Context, *RequestUsername) (*NRespond, error)
	CreateFollowRequestNotification(context.Context, *RequestUsername) (*NRespond, error)
	GetNotifications(*NProfile, Notifications_GetNotificationsServer) error
	NotificationSeen(context.Context, *NProfile) (*NRespond, error)
	GetUnseenNotificationsCount(context.Context, *NProfile) (*NotificationCount, error)
	mustEmbedUnimplementedNotificationsServer()
}

// UnimplementedNotificationsServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServer struct {
}

func (UnimplementedNotificationsServer) CreateLikeNotification(context.Context, *NRequest) (*NRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLikeNotification not implemented")
}
func (UnimplementedNotificationsServer) CreateCommentNotification(context.Context, *NRequest) (*NRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentNotification not implemented")
}
func (UnimplementedNotificationsServer) CreateFollowNotification(context.Context, *RequestUsername) (*NRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowNotification not implemented")
}
func (UnimplementedNotificationsServer) CreateFollowRequestNotification(context.Context, *RequestUsername) (*NRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowRequestNotification not implemented")
}
func (UnimplementedNotificationsServer) GetNotifications(*NProfile, Notifications_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationsServer) NotificationSeen(context.Context, *NProfile) (*NRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificationSeen not implemented")
}
func (UnimplementedNotificationsServer) GetUnseenNotificationsCount(context.Context, *NProfile) (*NotificationCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnseenNotificationsCount not implemented")
}
func (UnimplementedNotificationsServer) mustEmbedUnimplementedNotificationsServer() {}

// UnsafeNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServer will
// result in compilation errors.
type UnsafeNotificationsServer interface {
	mustEmbedUnimplementedNotificationsServer()
}

func RegisterNotificationsServer(s grpc.ServiceRegistrar, srv NotificationsServer) {
	s.RegisterService(&Notifications_ServiceDesc, srv)
}

func _Notifications_CreateLikeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).CreateLikeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/CreateLikeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).CreateLikeNotification(ctx, req.(*NRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_CreateCommentNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).CreateCommentNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/CreateCommentNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).CreateCommentNotification(ctx, req.(*NRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_CreateFollowNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).CreateFollowNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/CreateFollowNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).CreateFollowNotification(ctx, req.(*RequestUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_CreateFollowRequestNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).CreateFollowRequestNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/CreateFollowRequestNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).CreateFollowRequestNotification(ctx, req.(*RequestUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NProfile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationsServer).GetNotifications(m, &notificationsGetNotificationsServer{stream})
}

type Notifications_GetNotificationsServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type notificationsGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationsGetNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Notifications_NotificationSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).NotificationSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/NotificationSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).NotificationSeen(ctx, req.(*NProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_GetUnseenNotificationsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).GetUnseenNotificationsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Notifications/GetUnseenNotificationsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).GetUnseenNotificationsCount(ctx, req.(*NProfile))
	}
	return interceptor(ctx, in, info, handler)
}

// Notifications_ServiceDesc is the grpc.ServiceDesc for Notifications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notifications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLikeNotification",
			Handler:    _Notifications_CreateLikeNotification_Handler,
		},
		{
			MethodName: "CreateCommentNotification",
			Handler:    _Notifications_CreateCommentNotification_Handler,
		},
		{
			MethodName: "CreateFollowNotification",
			Handler:    _Notifications_CreateFollowNotification_Handler,
		},
		{
			MethodName: "CreateFollowRequestNotification",
			Handler:    _Notifications_CreateFollowRequestNotification_Handler,
		},
		{
			MethodName: "NotificationSeen",
			Handler:    _Notifications_NotificationSeen_Handler,
		},
		{
			MethodName: "GetUnseenNotificationsCount",
			Handler:    _Notifications_GetUnseenNotificationsCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotifications",
			Handler:       _Notifications_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notifications/notification.proto",
}
