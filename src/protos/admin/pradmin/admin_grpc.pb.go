// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pradmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	AddVerificationReq(ctx context.Context, in *AddVerificationRequest, opts ...grpc.CallOption) (*AddVerificationResponse, error)
	GetPendingVerifications(ctx context.Context, in *GetVerificationRequest, opts ...grpc.CallOption) (Admin_GetPendingVerificationsClient, error)
	ReviewVerificatonReq(ctx context.Context, in *ReviewVerificatonRequest, opts ...grpc.CallOption) (*ReviewVerificatonResponse, error)
	SendInappropriateContentReport(ctx context.Context, in *InappropriateContentReportRequest, opts ...grpc.CallOption) (*InappropriateContentReportResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) AddVerificationReq(ctx context.Context, in *AddVerificationRequest, opts ...grpc.CallOption) (*AddVerificationResponse, error) {
	out := new(AddVerificationResponse)
	err := c.cc.Invoke(ctx, "/Admin/AddVerificationReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPendingVerifications(ctx context.Context, in *GetVerificationRequest, opts ...grpc.CallOption) (Admin_GetPendingVerificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], "/Admin/GetPendingVerifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminGetPendingVerificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_GetPendingVerificationsClient interface {
	Recv() (*GetVerificationResponse, error)
	grpc.ClientStream
}

type adminGetPendingVerificationsClient struct {
	grpc.ClientStream
}

func (x *adminGetPendingVerificationsClient) Recv() (*GetVerificationResponse, error) {
	m := new(GetVerificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminClient) ReviewVerificatonReq(ctx context.Context, in *ReviewVerificatonRequest, opts ...grpc.CallOption) (*ReviewVerificatonResponse, error) {
	out := new(ReviewVerificatonResponse)
	err := c.cc.Invoke(ctx, "/Admin/ReviewVerificatonReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendInappropriateContentReport(ctx context.Context, in *InappropriateContentReportRequest, opts ...grpc.CallOption) (*InappropriateContentReportResponse, error) {
	out := new(InappropriateContentReportResponse)
	err := c.cc.Invoke(ctx, "/Admin/SendInappropriateContentReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	AddVerificationReq(context.Context, *AddVerificationRequest) (*AddVerificationResponse, error)
	GetPendingVerifications(*GetVerificationRequest, Admin_GetPendingVerificationsServer) error
	ReviewVerificatonReq(context.Context, *ReviewVerificatonRequest) (*ReviewVerificatonResponse, error)
	SendInappropriateContentReport(context.Context, *InappropriateContentReportRequest) (*InappropriateContentReportResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) AddVerificationReq(context.Context, *AddVerificationRequest) (*AddVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVerificationReq not implemented")
}
func (UnimplementedAdminServer) GetPendingVerifications(*GetVerificationRequest, Admin_GetPendingVerificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPendingVerifications not implemented")
}
func (UnimplementedAdminServer) ReviewVerificatonReq(context.Context, *ReviewVerificatonRequest) (*ReviewVerificatonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewVerificatonReq not implemented")
}
func (UnimplementedAdminServer) SendInappropriateContentReport(context.Context, *InappropriateContentReportRequest) (*InappropriateContentReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInappropriateContentReport not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_AddVerificationReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddVerificationReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/AddVerificationReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddVerificationReq(ctx, req.(*AddVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPendingVerifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVerificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).GetPendingVerifications(m, &adminGetPendingVerificationsServer{stream})
}

type Admin_GetPendingVerificationsServer interface {
	Send(*GetVerificationResponse) error
	grpc.ServerStream
}

type adminGetPendingVerificationsServer struct {
	grpc.ServerStream
}

func (x *adminGetPendingVerificationsServer) Send(m *GetVerificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Admin_ReviewVerificatonReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewVerificatonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ReviewVerificatonReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/ReviewVerificatonReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ReviewVerificatonReq(ctx, req.(*ReviewVerificatonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendInappropriateContentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InappropriateContentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendInappropriateContentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/SendInappropriateContentReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendInappropriateContentReport(ctx, req.(*InappropriateContentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVerificationReq",
			Handler:    _Admin_AddVerificationReq_Handler,
		},
		{
			MethodName: "ReviewVerificatonReq",
			Handler:    _Admin_ReviewVerificatonReq_Handler,
		},
		{
			MethodName: "SendInappropriateContentReport",
			Handler:    _Admin_SendInappropriateContentReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPendingVerifications",
			Handler:       _Admin_GetPendingVerifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin/admin.proto",
}
