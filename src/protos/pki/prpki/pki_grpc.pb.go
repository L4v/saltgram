// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prpki

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PKIClient is the client API for PKI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PKIClient interface {
	RegisterService(ctx context.Context, in *PKIRegisterRequest, opts ...grpc.CallOption) (*PKIRegisterResponse, error)
}

type pKIClient struct {
	cc grpc.ClientConnInterface
}

func NewPKIClient(cc grpc.ClientConnInterface) PKIClient {
	return &pKIClient{cc}
}

func (c *pKIClient) RegisterService(ctx context.Context, in *PKIRegisterRequest, opts ...grpc.CallOption) (*PKIRegisterResponse, error) {
	out := new(PKIRegisterResponse)
	err := c.cc.Invoke(ctx, "/PKI/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PKIServer is the server API for PKI service.
// All implementations must embed UnimplementedPKIServer
// for forward compatibility
type PKIServer interface {
	RegisterService(context.Context, *PKIRegisterRequest) (*PKIRegisterResponse, error)
	mustEmbedUnimplementedPKIServer()
}

// UnimplementedPKIServer must be embedded to have forward compatible implementations.
type UnimplementedPKIServer struct {
}

func (UnimplementedPKIServer) RegisterService(context.Context, *PKIRegisterRequest) (*PKIRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedPKIServer) mustEmbedUnimplementedPKIServer() {}

// UnsafePKIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PKIServer will
// result in compilation errors.
type UnsafePKIServer interface {
	mustEmbedUnimplementedPKIServer()
}

func RegisterPKIServer(s grpc.ServiceRegistrar, srv PKIServer) {
	s.RegisterService(&PKI_ServiceDesc, srv)
}

func _PKI_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKIRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKIServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PKI/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKIServer).RegisterService(ctx, req.(*PKIRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PKI_ServiceDesc is the grpc.ServiceDesc for PKI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PKI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PKI",
	HandlerType: (*PKIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _PKI_RegisterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pki/pki.proto",
}
